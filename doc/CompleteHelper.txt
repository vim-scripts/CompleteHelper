*CompleteHelper.txt*    Generic functions to support custom insert mode completions.

		      COMPLETE HELPER    by Ingo Karkat
							  *CompleteHelper.vim*
description			|CompleteHelper-description|
usage				|CompleteHelper-usage|
example				|CompleteHelper-example|
installation			|CompleteHelper-installation|
configuration			|CompleteHelper-configuration|
limitations			|CompleteHelper-limitations|
known problems			|CompleteHelper-known-problems|
todo				|CompleteHelper-todo|
history				|CompleteHelper-history|

==============================================================================
DESCRIPTION					  *CompleteHelper-description*

Via 'completefunc' and the |i_CTRL-X_CTRL-U| command, it is possible to define
custom |complete-functions|. To write extensions or alternatives to the
built-in completion functions, you often need to derive the completion
candidates from Vim's buffers and windows. This plugin offers generic
functions around extraction and handling of completion matches (something that
Vim doesn't yet expose to Vimscript), so that building your own custom
completion is quick and simple.

SEE ALSO								     *

The following custom completions use this plugin:

AlphaComplete:		Completes any sequence of alphabetic characters.
(vimscript #4912)
BidiComplete:		Considers text before AND AFTER the cursor.
(vimscript #4658)

BufNameComplete:	Completes filenames loaded in Vim.

CamelCaseComplete:	Expands CamelCaseWords and underscore_words based on
(vimscript #3915)	anchor characters for each word fragment.

CustomKeywordComplete:	Expands keywords from a sequence of contained
			characters.

InnerFragmentComplete:	Completes (and expands CamelCaseWord) fragments inside
(vimscript #4804)	words.

LineComplete:		Completes entire lines with looser matching that the
(vimscript #4911)	built-in |i_CTRL-X_CTRL-L|.

LongestComplete:	Completes based on the longest possible text before
			the cursor.

MiddleEndComplete:	Completes base matches in the middle or end.

MinLengthComplete:	Only offers completions that add more than n
			characters.

MotionComplete:		Completes a chunk covered by queried {motion} or text
(vimscript #4265)	object.
			Derivatives:
    BracketComplete	Completes text inside various brackets.
    (vimscript #4266)

    LineEndComplete	Completes the rest of the line.
    (vimscript #4267)

MultiWordComplete:	Completes a sequence of words based on anchor
(vimscript #4805)	characters for each word.

PatternComplete:	Completes matches of queried {pattern} or last search
(vimscript #4248)	pattern.

PrevInsertComplete:	Recall and insert mode completion for previously
(vimscript #4185)	inserted text.

RegisterComplete:	Completes register contents.

SameFiletypeComplete:	Completion from buffers with the same filetype.
(vimscript #4242)

SnippetComplete:	Completes defined abbreviations and other snippets.
(vimscript #2926)

WORDComplete:	    	Completes an entire sequence of non-blank characters.

RELATED WORKS								     *

- Mark Weber's vim-addon-completion library
  (https://github.com/MarcWeber/vim-addon-completion) has some functions to
  switch between completions and to do CamelCase matching.

==============================================================================
USAGE							*CompleteHelper-usage*

This plugin defines several functions. The following is an overview; you'll
find the details directly in the implementation files in the .vim/autoload/
directory.

CompleteHelper#FindMatches( matches, pattern, options )

The main helper functions that finds all matches of a:pattern in buffers
specified by a:options, and returns them in the List a:matches that can be
returned as-is to Vim.


CompleteHelper#ExtractText( startPos, endPos, matchObj )

Low-level function for extracting text from the current buffer. This is the
default extractor used by CompleteHelper#FindMatches().


CompleteHelper#Abbreviate#Word( matchObj )

Processes the match objects to make them prettier to display. Usually
|map()|ed over the matches returned from CompleteHelper#FindMatches().


CompleteHelper#JoinMultiline( text )

Can be used in CompleteHelper#FindMatches()'s a:options.processor if you want
to flatten multi-line matches, as the current default behavior of Vim is not
what users expect. (Newlines are inserted literally as ^@.)


CompleteHelper#Repeat#TestForRepeat()

Some built-in completions support the repetition of a completion, so that
subsequent words from the completion source are appended. This function allows
to implement such a repetition for custom completions, too.

DEBUGGING					    *CompleteHelper-debugging*

To help you with developing your own plugins, you can make the plugin save the
last used pattern(s) in a global variable, if it is defined: >
    :let g:CompleteHelper_DebugPatterns = []
    " Trigger custom completion.
    :echo g:CompleteHelper_DebugPatterns
<
==============================================================================
EXAMPLE						      *CompleteHelper-example*

Here is a simple completion that completes the keywords in front of the cursor
from the current file, like the built-in |compl-current| does. From the
completion base, it constructs a regexp matching all keywords that start with
the base, and delegates the entire work of finding the matches and building
the appropriate match objects to CompleteHelper#FindMatches().
>
    function! SimpleComplete( findstart, base )
	if a:findstart
	    " Locate the start of the keyword.
	    let l:startCol = searchpos('\k*\%#', 'bn', line('.'))[1]
	    if l:startCol == 0
		let l:startCol = col('.')
	    endif
	    return l:startCol - 1 " Return byte index, not column.
	else
	    " Find matches starting with a:base.
	    let l:matches = []
	    call CompleteHelper#FindMatches( l:matches, '\V\<' . escape(a:base, '\') . '\k\+', {'complete': '.'} )
	    return l:matches
	endif
    endfunction

    inoremap <C-x><C-z> <C-o>:set completefunc=SimpleComplete<CR><C-x><C-u>
<
==============================================================================
INSTALLATION					 *CompleteHelper-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vmb.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim CompleteHelper*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES					 *CompleteHelper-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.018 or
  higher.

CONFIGURATION					*CompleteHelper-configuration*

For a permanent configuration, put the following commands into your |vimrc|:
				  *g:CompleteHelper_IsDefaultToBackwardSearch*
When no a:options.backward_search is passed to CompleteHelper#FindMatches(),
it defaults to backwards search, as this offers recent / preceding matches
(which are likier to be recalled) first. If you don't want that, either
explicitly pass the a:options.backward_search flag (especially do this if you
offer both backward and forward matching mappings), or globally revert to the
previous behavior via: >
    let g:CompleteHelper_IsDefaultToBackwardSearch = 0
<
==============================================================================
LIMITATIONS					  *CompleteHelper-limitations*

- Only the '.' (current buffer), 'w' (other windows), and 'b' (other listed
  buffers) values (the last one with limitations) of 'complete'
  are currently implemented.
- As the searched buffers need to be either displayed in a
  window and jumped around for text extraction, or the buffer contents
  searched line by line, this doesn't scale well in Vimscript. I would wish
  for a built-in Vim function that does this (and supports all values of
  'complete').

KNOWN PROBLEMS				       *CompleteHelper-known-problems*

TODO							 *CompleteHelper-todo*

IDEAS							*CompleteHelper-ideas*

==============================================================================
HISTORY						      *CompleteHelper-history*

1.40	16-Apr-2014
- Remove the duplicated implementation in CompleteHelper#ExtractText(),
  deprecate it, and delegate to ingo#text#Get().
- FIX: a:options.backward_search with falsy value also enables backward
  search.
- Add g:CompleteHelper_IsDefaultToBackwardSearch config var that lets
  CompleteHelper#FindMatches() default to backwards search when no
  a:options.backward_search is given. Since all of my custom completions don't
  offer separate backward / forward mappings, and backward search (i.e.
  offering first what got recently typed) makes more sense, default to
  backward search from now on.
- Allow to debug the pattern via :let g:CompleteHelper_DebugPatterns = [].
- Allow completion repeats to continue repeating from following lines like the
  built-in completions do: The newline plus any indent is removed, and just
  the first word from the following line is matched. For this, the
  CompleteHelper#Repeat#Processor() is offered.
- I18N: Correctly handle repeats of (text ending with a) multi-byte character:
  Instead of just subtracting one from the column, ask for an end-exclusive
  text grab from ingo#text#Get().
- Add CompleteHelper#Repeat#GetPattern() to encapsulate the common assembly of
  the repeat pattern, especially the complex expressions with negative and
  positive character expressions to emulate Vim's built-in completion repeat
  behavior.
  *** You need to update to ingo-library (vimscript #4433) version 1.018! ***

1.32	14-Dec-2013
- ENH: Allow to pass a List of regular expressions to
  CompleteHelper#FindMatches(). If you have multiple regular expressions that
  can match at the same position and should yield separate matches, you cannot
  use regular expression branches.
- Add dependency to ingo-library (vimscript #4433). *** You need to separately
  install ingo-library (vimscript #4433) version 1.014 (or higher)! ***

1.31	07-Mar-2013
- Truncate to a bit less than half of Vim's width because the popup menu
  spacing as well as fold, number and sign columns further reduce the
  available space.
- Avoid "E11: Invalid in command-line window" error when performing
  completions that search other windows from the command-line window. Use the
  buffer-search instead; it does not need to change the current window for its
  search.
- FIX: Don't abort iteration of buffers in s:FindMatchesInOtherBuffers() when
  one buffer was already searched; instead :continue with the next.

1.30	27-Sep-2012
- ENH: Allow skipping of buffers via new a:options.bufferPredicate Funcref.
- Optimization: Skip search in other windows where there's only one that got
  searched already by s:FindMatchesInCurrentWindow().
- Optimization: Only visit window when its buffer wasn't already searched.

1.20	03-Sep-2012 (unreleased)
- ENH: Implement a:options.complete = 'b' (only supporting single-line matches and no a:options.extractor).
- Transparently handle 'autochdir': still show the correct relative path in
  matches from other windows, and restore the buffer's CWD even if it was
  temporarily changed.

1.11	03-Sep-2012
- Make a:matchObj in CompleteHelper#ExtractText() optional; it's not used
  there, anyway. This avoids having to pass an empty dictionary just to
  satisfy the API.
- Introduce a:alreadySearchedBuffers to allow for swapped order in
  a:options.complete and to prepare for additional complete options.

1.10	05-May-2012
- Factor out CompleteHelper#Abbreviate#Text() to allow processing of
  completion menu text (and other uses), too.
- ENH: Offer full completion word in the preview window when it is shown
  abbreviated. Clients get this automatically when using
  CompleteHelper#Abbreviate#Word().

1.00	31-Jan-2012
First published version.

0.01	13-Aug-2008
Started development.

==============================================================================
Copyright: (C) 2008-2014 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
